package com.hyperboat.面试经典150题.矩阵;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.hyperboat.题单.面试经典150题.矩阵._36有效的数独;
import org.junit.jupiter.api.Test;

class _36有效的数独Test {

  @Test
  void isValidSudoku() {
    char[][] board =
        {
            {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
            {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
            {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
            {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
            {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
            {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
            {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
            {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
            {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
    assertTrue(new _36有效的数独().isValidSudoku(board));
    char[][] board1 = {
        {'8', '3', '.', '.', '7', '.', '.', '.', '.'}
        , {'6', '.', '.', '1', '9', '5', '.', '.', '.'}
        , {'.', '9', '8', '.', '.', '.', '.', '6', '.'}
        , {'8', '.', '.', '.', '6', '.', '.', '.', '3'}
        , {'4', '.', '.', '8', '.', '3', '.', '.', '1'}
        , {'7', '.', '.', '.', '2', '.', '.', '.', '6'}
        , {'.', '6', '.', '.', '.', '.', '2', '8', '.'}
        , {'.', '.', '.', '4', '1', '9', '.', '.', '5'}
        , {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
    assertFalse(new _36有效的数独().isValidSudoku(board1));
    char[][] board2 = {
        {'.', '.', '5', '.', '.', '.', '.', '.', '6'},
        {'.', '.', '.', '.', '1', '4', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '9', '2', '.', '.'},
        {'5', '.', '.', '.', '.', '2', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '3', '.'},
        {'.', '.', '.', '5', '4', '.', '.', '.', '.'},
        {'3', '.', '.', '.', '.', '.', '4', '2', '.'},
        {'.', '.', '.', '2', '7', '.', '6', '.', '.'}};
    assertTrue(new _36有效的数独().isValidSudoku(board2));
    char[][] board3 = {
        {'.', '.', '.', '.', '8', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '5', '.', '.'},
        {'.', '.', '.', '.', '4', '.', '.', '2', '.'},
        {'.', '.', '.', '3', '.', '9', '.', '.', '.'},
        {'.', '.', '1', '8', '.', '.', '9', '.', '.'},
        {'.', '.', '.', '.', '.', '5', '1', '.', '.'},
        {'.', '.', '3', '.', '.', '8', '.', '.', '.'},
        {'.', '1', '2', '.', '3', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '7', '.', '.', '1'}};
    assertTrue(new _36有效的数独().isValidSudoku(board3));
    char[][] board4 = {
        {'.', '.', '.', '.', '5', '.', '.', '1', '.'},
        {'.', '4', '.', '3', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '3', '.', '.', '1'},
        {'8', '.', '.', '.', '.', '.', '.', '2', '.'},
        {'.', '.', '2', '.', '7', '.', '.', '.', '.'},
        {'.', '1', '5', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '2', '.', '.', '.'},
        {'.', '2', '.', '9', '.', '.', '.', '.', '.'},
        {'.', '.', '4', '.', '.', '.', '.', '.', '.'}};
    assertFalse(new _36有效的数独().isValidSudoku(board4));
    char[][] board5 = {
        {'.', '.', '5', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '8', '.', '.', '.', '3', '.'},
        {'.', '5', '.', '.', '2', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '9'},
        {'.', '.', '.', '.', '.', '.', '4', '.', '.'},
        {'.', '.', '.', '.', '.', '.', '.', '.', '7'},
        {'.', '1', '.', '.', '.', '.', '.', '.', '.'},
        {'2', '4', '.', '.', '.', '.', '9', '.', '.'}};
    assertFalse(new _36有效的数独().isValidSudoku(board5));
  }
}